Use UI

Class cUtils is a cObject
    
    Function ReadFile Global String sFilePath Returns String
        Integer iChannel
        String sHomeDir sData sBuffer sFullFilePath sCr
        Handle hoWorkSpace

        Get phoWorkspace of ghoApplication to hoWorkspace
        Get psHome of hoWorkspace to sHomeDir
        Move (sHomeDir - sFilePath) to sFullFilePath

        Move (Seq_New_Channel()) to iChannel
        If (iChannel=DF_SEQ_CHANNEL_NOT_AVAILABLE) Procedure_Return False

        Direct_Input channel iChannel sFullFilePath
        If (not(SeqEof)) Begin
            Repeat
                Readln channel iChannel sBuffer
                Move (sData+sCr+sBuffer) to sData
                Move (Character(10)) to sCr
            Until (SeqEof)
        End
        Else Move ("File not found: " + sFilePath) to sData
        
        Close_Input channel iChannel

        Function_Return sData
    End_Function
    
    // sType: W (creating a new file and write), A (create if not exist and append)
    Procedure WriteFile Global String sFilePath String sText String sType
        String sHomeDir sFullFilePath
        Integer iChannel
        Handle hoWorkSpace
        Boolean bOk
        
        Move (Seq_New_Channel()) to iChannel
        If (iChannel=DF_SEQ_CHANNEL_NOT_AVAILABLE) Procedure_Return False
        
        Get phoWorkspace of ghoApplication to hoWorkSpace
        Get psHome of hoWorkSpace to sFullFilePath
        Move (sFullFilePath - sFilePath) to sFullFilePath
        
        Get FolderManager sFullFilePath "C" to bOk
        
        If (num_arguments = 2) Move 'A' to sType
        If (sType = 'W') Direct_Output channel iChannel sFullFilePath
        If (sType = 'A') Append_Output channel iChannel sFullFilePath
        
        Writeln channel iChannel sText
        
        Close_Output channel iChannel
        Send Seq_Release_Channel iChannel
        
        Procedure_Return True
    End_Procedure
    
    
    // sType: 
    //   - MSG, log and send message to admin
    //   - INFO, log with no mail
    //   - WARN, send warning to admin
    //   - ERR, send error message to admin
    //
    // Usage:
    // Send DebugLog 'INFO' ('Data to monitor ' + sRelevantVariable)
    
    Procedure DebugLog Global String sType String sMessage
        String sCr sIP sUserAgent sUsername sMailBody sLoginName sStack
        Move (Character(10)) to sCr
        
        Move (sType + ': ' + sMessage) to sMailBody
        
        CallStackDump sStack
        Move (sMailBody + sCr + sCr + 'Trace: ' + sStack) to sMailBody
        
        Move (sMailBody + sCr + sCr + 'Date: ' + String(CurrentDateTime())) to sMailBody
        
        #IFDEF IS$WEBAPP
            Get psUsername of oSessionManager to sUsername
            Get psLoginName of oSessionManager to sLoginName
            Move (sMailBody + sCr + 'User: ' + sLoginName + ' (' + sUsername + ')') to sMailBody
            
            Get ServerVariable of ghoWebServiceDispatcher "HTTP_USER_AGENT" to sUserAgent
            Move (sMailBody + sCr + 'Browser: ' +  sUserAgent) to sMailBody
            
            Get ServerVariable of ghoWebServiceDispatcher "HTTP_X_FORWARDER_FOR" to sIP
            If (sIP = "" or Lowercase(sIP) = "unknown") Begin
                Get ServerVariable of ghoWebServiceDispatcher "REMOTE_ADDR" to sIP
            End
            Move (sMailBody + sCr + 'IP: ' +  sIP) to sMailBody
            
        #ELSE
            //Get psUsername of oSessionManager to sUsername
            Move (sMailBody + sCr + 'User: Server') to sMailBody
            
            Get ServerVariable of ghoWebServiceDispatcher "HTTP_USER_AGENT" to sUserAgent
            Move (sMailBody + sCr + 'Browser: DataFlex') to sMailBody
            
            Move (sMailBody + sCr + 'IP: 127.0.0.1') to sMailBody
            
        #ENDIF
        
        Send WriteFile 'debug.log' (sMailBody + sCr + '----------------------------------------------') 'A'
        
        If (sType <> 'INFO') Begin
            // Send mail here
        End
        
    End_Procedure
    
    // sCmd - V: verify, C: create
    Function FolderManager Global String sPath String sCmd Returns Boolean
        String[] sFolderArr
        String sTestPath
        Integer iDepth
        Boolean bExists

        //Move (StrSplitToArray(sPath, '/')) to sFolderArr
        //If (SizeOfArray(sFolderArr) < 2) 
        Move (StrSplitToArray(sPath, '\')) to sFolderArr
        
        Move 1 to iDepth
        Move sFolderArr[0] to sTestPath

        File_Exist (sTestPath)  bExists
        If (not(bExists)) Make_Directory (sTestPath)

        While (iDepth < (SizeOfArray(sFolderArr)-1))
            Move (sTestPath + "\" + sFolderArr[iDepth]) to sTestPath
            
            File_Exist (sTestPath)  bExists
            If (not(bExists)) Begin
                If (sCmd = "C") Begin
                    Make_Directory (sTestPath)
                End
                If (sCmd = "V") Begin
                    Function_Return False
                End
            End
            Increment iDepth
        Loop

        Function_Return True
    End_Function
    
    Function RemoveSuroundingApposFromString Global String sSrc Returns String
        String sReturn
        Integer iCharCount
        
        Move sSrc to sReturn

        Move (SizeOfString(sSrc)) to iCharCount
        If ((Mid(sSrc, 1, 1)) = '"' and (Mid(sSrc, 1, iCharCount)) = '"') Begin
            Move (Mid(sSrc, (iCharCount-2), 2)) to sReturn
        End
        
        Function_Return sReturn
    End_Function

End_Class